import discord
from discord.ext import commands
import requests
from flask import Flask
from threading import Thread
from dotenv import load_dotenv
import os

# ==== Flask ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Replit ‡∏´‡∏•‡∏±‡∏ö ====
app = Flask('')
@app.route('/')
def home():
    return "‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏≠‡∏¢‡∏π‡πà"
def run():
    app.run(host='0.0.0.0', port=8080)
def keep_alive():
    t = Thread(target=run)
    t.start()

# ==== TOKEN ====
load_dotenv()
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# ==== INTENTS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ====
intents = discord.Intents.all()
intents.message_content = True

# ==== ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≠‡∏ó ====
bot = commands.Bot(command_prefix="!", intents=intents)

# ==== ‡∏¢‡∏¥‡∏á API ‡πÑ‡∏õ‡∏´‡∏≤ Claude 3 Haiku ‡∏ö‡∏ô OpenRouter ====
def ask_claude(prompt):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "anthropic/claude-3-haiku:beta",
        "messages": [{"role": "user", "content": prompt}],
        "max_tokens": 1000
    }

    try:
        response = requests.post(url, headers=headers, json=payload)
        if response.status_code == 200:
            result = response.json()
            return result["choices"][0]["message"]["content"]
        else:
            return f"‚ùå Error {response.status_code}: {response.text}"
    except Exception as e:
        return f"‚ùå Connection Error: {str(e)}"

# ==== ‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ====
@bot.event
async def on_ready():
    print(f"‚úÖ ‡∏ö‡∏≠‡∏ó {bot.user} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")

  #Bot event member join
@bot.event
async def on_member_join(member):
    channel = bot.get_channel(1390567025558163569)
    text = f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‚ú®üôå, {member.mention}!"
    await channel.send(text)

# ==== ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏á‡∏°‡∏≤ ====
@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    prompt = message.content.strip()

    # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ñ‡∏≤‡∏° API ‡πÅ‡∏ö‡∏ö async ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏•‡πá‡∏≠‡∏Å
    response = await bot.loop.run_in_executor(None, ask_claude, prompt)

    await message.channel.send(response)
    await bot.process_commands(message)

# === SLASH COMMAND
@bot.tree.command(name="resume", description="‡∏î‡∏π‡πÄ‡∏£‡∏ã‡∏π‡πÄ‡∏°‡πà")
async def show_resume(interaction: discord.Interaction):

    embed = discord.Embed(
        title="üë®‚Äçüíª My resume",
        description="‡∏£‡∏ß‡∏°‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå",
        color=discord.Color.green()
    )

    embed.add_field(name="üõ†Ô∏è ‡∏ó‡∏±‡∏Å‡∏©‡∏∞", value="‚Ä¢ Python (Expert)\n‚Ä¢ Discord Bot\n‚Ä¢ AI/ML\n‚Ä¢ Web Dev", inline=False)
    embed.add_field(name="üìå ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå", value="‚Ä¢ Freelance Dev\n‚Ä¢ ‡∏ó‡∏≥ Dashboard / Bot ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó\n‚Ä¢ ‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≤‡∏¢ AI", inline=False)
    embed.set_footer(text="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ‡∏Å.‡∏Ñ. 2025")

    await interaction.response.send_message(embed=embed, ephemeral=False)


# ==== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó ====
keep_alive()
bot.run(DISCORD_TOKEN)
